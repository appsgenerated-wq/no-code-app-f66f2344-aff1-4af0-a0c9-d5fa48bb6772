// TEMPORARY: CORS-enabled health handler generated by AppAssembler.
// This handler echoes the Origin for preview environments and short-circuits OPTIONS preflight.
// TODO: Replace with an allowlist-based CORS middleware or handle CORS at an API gateway in production.
module.exports = async (req, res, manifest) => {
  const timestamp = new Date().toISOString();
  const appId = req.get('X-App-ID') || 'Unknown';

  console.log('üîç [HEALTH] Health check at ' + timestamp + ', App ID: ' + appId);

  try {
    // Echo origin to support dynamic preview origins (StackBlitz/WebContainers).
    const origin = req.get('Origin') || '*';
    res.setHeader('Access-Control-Allow-Origin', origin);
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-App-ID');
    // If your frontend uses credentials (cookies/authorization), keep this true and ensure origin is echoed.
    res.setHeader('Access-Control-Allow-Credentials', 'true');

    if (req.method === 'OPTIONS') {
      return res.status(204).send();
    }

    const healthStatus = { status: 'ok', timestamp: timestamp, appId: appId, manifest: 'running', version: '1.0.0' };

    console.log('‚úÖ [HEALTH] Health check successful:', healthStatus);
    res.status(200).json(healthStatus);
  } catch (error) {
    console.error('‚ùå [HEALTH] Health check failed:', error);
    // Ensure CORS headers present on errors as well
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-App-ID');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.status(500).json({ status: 'error' });
  }
};